/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.code.openapi.api;

import com.code.openapi.model.UserModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-15T20:36:28.222+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * GET /users/{userId} : get Api to fetch the user details by id
     * get Api to fetch the user details by id
     *
     * @param userId holds userId  (required)
     * @return UserModel details (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        summary = "get Api to fetch the user details by id",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "UserModel details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserModel> getUserById(
        @Parameter(name = "userId", description = "holds userId ", required = true) @PathVariable("userId") Long userId
    ) {
        return getDelegate().getUserById(userId);
    }


    /**
     * POST /users : Post Api to save users
     * Post Api to save users
     *
     * @param userModel Holds UserModel  (optional)
     * @return Success/failure (status code 200)
     */
    @Operation(
        operationId = "saveUser",
        summary = "Post Api to save users",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success/failure", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> saveUser(
        @Parameter(name = "UserModel", description = "Holds UserModel ") @Valid @RequestBody(required = false) UserModel userModel
    ) {
        return getDelegate().saveUser(userModel);
    }

}
